vm = require \vm
Q = require \q

exports.Eco = new class
	baseOpts = 
		open: "{{"
		close: "}}"
		wrapper: "Q.all"
	@chunk = (tmpl)->
		#tmpl -= /\s*<!\[CDATA\[\s*|\s*\]\]>\s*|[\r\t]/g
		tmpl.split open
		.join close+"\x1b"
		.split close

	@trans = (chunk)->
		if chunk.0 is "\x1b" then
			"do -> [].concat do\n" + 
			(chunk.substr 1 .replace /^(\s*)/gm,"\t$1") +
			"\n.join ''"
		else '"""'+chunk+'"""'

	compile: (tmpl,opts = {})->
		baseOpts import opts
		squish = for chunk of ..chunk tmpl
			pp chunk
			..trans chunk
		"return #wrapper ["+(squish.join ",")+"]"

if module is require.main
	co = exports.Eco.compile """
hello
{{thing}}
"""
	src = Coco.compile co
	console.log co
	compiled = vm.createScript src
	compiled.runInNewContext {thing: "world", Q} .then ->
		console.log it.join ""